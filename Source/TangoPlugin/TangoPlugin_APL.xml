<?xml version="1.0" encoding="utf-8"?>
<!--
Copyright 2016 Google

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<root xmlns:android="http://schemas.android.com/apk/res/android">
	<trace enable="true"/>

	<!-- TangoPlugin Plugin Android Build Initialisation, specify any extra needed variables, 
		such as platform detection, here. -->
	<init>
		<log text="TangoPlugin Plugin Build Initialisation"/>
		<!-- Attempt to read the DefaultEngine.ini file to determine if Tango Permissions are required. -->
		<setBoolFromProperty result="bTangoAreaLearningEnabled" ini="$S(PluginDir)/../../../../Config/DefaultEngine" section="/Script/TangoPlugin.TangoRuntimeSettings" property="bTangoAreaLearningEnabled" default="true" />
	</init>

	<!-- Tango updates applied to AndroidManifest.xml -->
	<androidManifestUpdates>
	  <log text="TangoPlugin Plugin Android Manifest Additions"/>
		
		<setElement result="bTangoAreaLearningEnabledElement" value="meta-data" />
		<addAttribute tag="$bTangoAreaLearningEnabledElement" name="android:name" value="com.projecttango.bTangoAreaLearningEnabled" />
		<addAttribute tag="$bTangoAreaLearningEnabledElement" name="android:value" value="$B(bTangoAreaLearningEnabled)"/>

		<addElement tag="application" name="bTangoAreaLearningEnabledElement" />

    <setElement result="bRequiresTangoLibraryElement" value="uses-library"/>
    <addAttribute tag="$bRequiresTangoLibraryElement" name="android:name" value="com.projecttango.libtango_device2"/>
    <addAttribute tag="$bRequiresTangoLibraryElement" name="android:required" value="true"/>
    
    <addElement tag="application" name="bRequiresTangoLibraryElement" />
    
    <!-- Required for GetCameraIntrinsics as well as the TangoImage component-->
    <addPermission android:name="android.permission.CAMERA"/>

    <!-- Required for the ability to import and export ADFs.-->
    <addPermission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
    <addPermission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>

    <addElements tag="application">
    </addElements>

	</androidManifestUpdates>

	<!-- Copy the project's .java files, in this case the TangoInterface class file.
        Note: We no longer need to copy any .jar files across- we now only use the .so file already present on the Tango device. -->
	<resourceCopies>
    <log text="TangoPlugin Plugin Android Source Code and Library Resource Copies"/>
    <log text="PluginDir: $S(PluginDir)"/>
    <copyDir src="$S(PluginDir)/../Java/com" dst="$S(BuildDir)/src/com" />
    <isArch arch="armeabi-v7a">
      <copyFile src="$S(PluginDir)/../../ThirdParty/tango_support_api/lib/armeabi-v7a/libtango_support_api.so"
						dst="$S(BuildDir)/libs/armeabi-v7a/libtango_support_api.so" />
      <copyFile src="$S(PluginDir)/../../ThirdParty/tango_3d_reconstruction/lib/armeabi-v7a/libtango_3d_reconstruction.so"
      dst="$S(BuildDir)/libs/armeabi-v7a/libtango_3d_reconstruction.so" />
    </isArch>
    <isArch arch="arm64-v8a">
      <copyFile src="$S(PluginDir)/../../ThirdParty/tango_support_api/lib/arme64-v8a/libtango_support_api.so"
						dst="$S(BuildDir)/libs/arm64-v8a/libtango_support_api.so" />
      <copyFile src="$S(PluginDir)/../../ThirdParty/tango_3d_reconstruction/lib/arm64-v8a/libtango_3d_reconstruction.so"
      dst="$S(BuildDir)/libs/arm64-v8a/libtango_3d_reconstruction.so" />
    </isArch>
    <isArch arch="x86">
      <copyFile src="$S(PluginDir)/../../ThirdParty/tango_support_api/lib/x86/libtango_support_api.so"
						dst="$S(BuildDir)/libs/x86/libtango_support_api.so" />
      <copyFile src="$S(PluginDir)/../../ThirdParty/tango_3d_reconstruction_/lib/x86/libtango_3d_reconstruction.so"
      dst="$S(BuildDir)/libs/x86/libtango_3d_reconstruction.so" />
    </isArch>
  </resourceCopies> 
  
	<!-- Import the Tango Interface Class into the GameActivity. -->
  <!-- Note that the java modules referenced here will have to be copied across using the resourceCopies tag, or a 'symbol not found' error will occur.-->
	<gameActivityImportAdditions>
		<insert>
			
            import com.projecttango.plugin.TangoInterface;
            import android.util.Log;
			
		</insert>
	</gameActivityImportAdditions>

	<!-- Add an Instance of the Tango Interface class to GameActivity. -->
	<gameActivityClassAdditions>
		<insert>

      //Tango Interface implementation

      private TangoInterface tangoInterface;

      //Thunking functions
      public Context AndroidThunkJava_GetAppContext()
      {
        return this.getApplicationContext();
      }

      public void AndroidThunkJava_RequestTangoService()
      {
        if(tangoInterface != null)
        {
            tangoInterface.RequestTangoService(this);
        }
        return;
      }
      
      public void AndroidThunkJava_UnbindTangoService()
      {
        if(tangoInterface != null)
        {
            tangoInterface.UnbindTangoService(this);
        }
        return;
      }
      
      public void AndroidThunkJava_RequestImportPermission(String Filename)
      {
        if(tangoInterface != null)
        {
          tangoInterface.requestImportPermissions(this, Filename);
        }
        return;
      }

      public void AndroidThunkJava_RequestExportPermission(String UUID, String Filename)
      {
        if(tangoInterface != null)
        {
         tangoInterface.requestExportPermissions(this, UUID, Filename);
        }
      return;
      }
    </insert>
	</gameActivityClassAdditions>

	<!-- Determine if the Tango Interface instance can be created, and what intents are required to run. -->
	<gameActivityReadMetadataAdditions>
		<insert>
			
			boolean bIsTangoAreaLearningEnabled = false;
    
			//Is the Area Learning Intent Enabled.

			if (bundle.containsKey("com.projecttango.bTangoAreaLearningEnabled"))
			{
				bIsTangoAreaLearningEnabled = bundle.getBoolean("com.projecttango.bTangoAreaLearningEnabled");
				Log.debug( "Found bTangoAreaLearningEnabled = " + bIsTangoAreaLearningEnabled);
			}
			
      //We want an interface even if there are no special permissions requested as Tango motion no longer requires permissions
      
				tangoInterface = new TangoInterface(bIsTangoAreaLearningEnabled);
			
		</insert>
	</gameActivityReadMetadataAdditions>

	<!-- When the Activity Resumes, tell the Tango Interface to resume. -->
	<gameActivityOnResumeAdditions>
		<insert>
			
			if (tangoInterface != null)
			{
				tangoInterface.resume(this);
			}
			
		</insert>
	</gameActivityOnResumeAdditions>
  
  <!-- When the Activity pauses, tell the Tango Interface to pause. -->
  <gameActivityOnPauseAdditions>
    <insert>

      if (tangoInterface != null) {
        tangoInterface.pause();
      }

    </insert>
  </gameActivityOnPauseAdditions>

	<!-- Pass any ActivityResults to the Tango Interface in case it can handle it -->
	<gameActivityOnActivityResultAdditions>
		<insert>
			
			if (tangoInterface != null &amp;&amp; tangoInterface.handleActivityResult(requestCode, resultCode, data, this))
			{
				Log.debug("Tango Interface handled onActivityResult");
			}
			
		</insert>
	</gameActivityOnActivityResultAdditions>
	
    <!-- @NOTE: We have disabled this as there is now library loading code in the static braces of TangoInterface -->
	<!-- Tell the Java implementation to load the Tango API library on the device 
		before we start executing the GameActivity. -->
    <soLoadLibrary>
        <insert>
            //Begin dynamic load attempt of the Tango library.
            
            final int ARCH_ERROR = -2;
            final int ARCH_FALLBACK = -1;
            final int ARCH_DEFAULT = 0;
            final int ARCH_ARM64 = 1;
            final int ARCH_ARM32 = 2;
            final int ARCH_X86_64 = 3;
            final int ARCH_X86 = 4;
            
            Log.debug("TangoVMTests: Shim Static class called.");
            
            Log.debug("TangoLifecycleDebugging: Now attempting to load the shared library.");
            int loadedSoId = ARCH_ERROR;
            String basePath = "/data/data/com.google.tango/libfiles/";
            if (!(new File(basePath).exists())) {
            basePath = "/data/data/com.projecttango.tango/libfiles/";
            }
            Log.debug("TangoInitializationHelper: basePath: " + basePath);
            
            try {
            System.load(basePath + "arm64-v8a/libtango_client_api.so");
            loadedSoId = ARCH_ARM64;
            Log.debug("TangoInitializationHelper: Success! Using arm64-v8a/libtango_client_api.");
            } catch (UnsatisfiedLinkError e) {
            }
            //Note: &lt; = lessthan operator
            if (loadedSoId &lt; ARCH_DEFAULT) {
            try {
            System.load(basePath + "armeabi-v7a/libtango_client_api.so");
            loadedSoId = ARCH_ARM32;
            Log.debug("TangoInitializationHelper: Success! Using armeabi-v7a/libtango_client_api.");
            } catch (UnsatisfiedLinkError e) {
            }
            }
            if (loadedSoId &lt; ARCH_DEFAULT) {
            try {
            System.load(basePath + "x86_64/libtango_client_api.so");
            loadedSoId = ARCH_X86_64;
            Log.debug("TangoInitializationHelper: Success! Using x86_64/libtango_client_api.");
            } catch (UnsatisfiedLinkError e) {
            }
            }
            if (loadedSoId &lt; ARCH_DEFAULT) {
            try {
            System.load(basePath + "x86/libtango_client_api.so");
            loadedSoId = ARCH_X86;
            Log.debug("TangoInitializationHelper: Success! Using x86/libtango_client_api.");
            } catch (UnsatisfiedLinkError e) {
            }
            }
            if (loadedSoId &lt; ARCH_DEFAULT) {
            try {
            System.load(basePath + "default/libtango_client_api.so");
            loadedSoId = ARCH_DEFAULT;
            Log.debug("TangoInitializationHelper: Success! Using default/libtango_client_api.");
            } catch (UnsatisfiedLinkError e) {
            }
            }
            if (loadedSoId &lt; ARCH_DEFAULT) {
            try {
            System.loadLibrary("tango_client_api");
            loadedSoId = ARCH_FALLBACK;
            Log.debug("Falling back to libtango_client_api.so symlink.");
            } catch (UnsatisfiedLinkError e) {
            }
            }
            
            //Begin evaluation of library loading routine result here
            
            //@NOTE: This code borrowed from TangoJNINative.java in the HelloMotion c example code
            // This project depends on tango_client_api, so we need to make sure we load
            // the correct library first.
            int LibraryLoadResult = loadedSoId;
            if (LibraryLoadResult == ARCH_ERROR)
            {
            Log.debug("TangoLifecycleDebugging: ERROR! Unable to load libtango_client_api.so!");
            }
            else
            {
            Log.debug("TangoLifecycleDebugging: Success! Able to load libtango_client_api.so!");
            }
            
            if(LibraryLoadResult == ARCH_FALLBACK)
            {
            Log.debug("TangoLifecycleDebugging: NOTE: Unable to load libtango_client_api.so from new source. Fell back to the Symlink version. Will not work outside a Yellowstone tablet!");
            }
            
        </insert>
    </soLoadLibrary>
</root>
